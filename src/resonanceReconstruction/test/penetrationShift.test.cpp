#include <vector>

#include "catch.hpp"
#include "resonanceReconstruction.hpp"

using namespace njoy::resonanceReconstruction;

SCENARIO("penetration shift"){  
  auto trial =
    ranges::view::cartesian_product
    ( ranges::view::iota(0,5), ranges::view::linear_distribute( 0., 5., 21 ) )
    | ranges::view::transform
      ( []( auto&& tuple ){
        return penetrationShift( std::get<0>(tuple), std::get<1>(tuple) ); } );

  /* reference values generated with OpenMC */
  std::vector< std::array< double, 2 > > reference = 
  {{{0.0, 0.0}},
   {{0.25, 0.0}},
   {{0.5, 0.0}},
   {{0.75, 0.0}},
   {{1.0, 0.0}},
   {{1.25, 0.0}},
   {{1.5, 0.0}},
   {{1.75, 0.0}},
   {{2.0, 0.0}},
   {{2.25, 0.0}},
   {{2.5, 0.0}},
   {{2.75, 0.0}},
   {{3.0, 0.0}},
   {{3.25, 0.0}},
   {{3.5, 0.0}},
   {{3.75, 0.0}},
   {{4.0, 0.0}},
   {{4.25, 0.0}},
   {{4.5, 0.0}},
   {{4.75, 0.0}},
   {{5.0, 0.0}},
   {{0.0, -1.0}},
   {{0.014705882352941176, -0.94117647058823528}},
   {{0.10000000000000001, -0.80000000000000004}},
   {{0.27000000000000002, -0.64000000000000001}},
   {{0.5, -0.5}},
   {{0.76219512195121952, -0.3902439024390244}},
   {{1.0384615384615385, -0.30769230769230771}},
   {{1.3192307692307692, -0.24615384615384617}},
   {{1.6000000000000001, -0.20000000000000001}},
   {{1.8788659793814433, -0.16494845360824742}},
   {{2.1551724137931036, -0.13793103448275862}},
   {{2.4288321167883211, -0.11678832116788321}},
   {{2.7000000000000002, -0.10000000000000001}},
   {{2.9689189189189191, -0.086486486486486491}},
   {{3.2358490566037736, -0.075471698113207544}},
   {{3.5010373443983402, -0.066390041493775934}},
   {{3.7647058823529411, -0.058823529411764705}},
   {{4.027049180327869, -0.052459016393442623}},
   {{4.2882352941176469, -0.047058823529411764}},
   {{4.5484084880636608, -0.042440318302387266}},
   {{4.8076923076923075, -0.038461538461538464}},
   {{0.0, -2.0}},
   {{0.00010624734381640459, -1.9787505312367191}},
   {{0.0031847133757961785, -1.910828025477707}},
   {{0.021565495207667731, -1.7891373801916932}},
   {{0.076923076923076927, -1.6153846153846154}},
   {{0.18921046258173893, -1.4066359893436668}},
   {{0.36486486486486486, -1.1891891891891893}},
   {{0.5954017287799348, -0.98625478248547538}},
   {{0.86486486486486491, -0.81081081081081086}},
   {{1.1575511644318983, -0.66619618913196899}},
   {{1.4616463985032742, -0.55004677268475211}},
   {{1.7695578605019118, -0.45778578648969365}},
   {{2.0769230769230771, -0.38461538461538464}},
   {{2.3814878004977293, -0.32634630679631577}},
   {{2.6822534312160866, -0.27960421321417173}},
   {{2.9789224685778843, -0.24177376076825308}},
   {{3.2715654952076676, -0.2108626198083067}},
   {{3.5604306047323391, -0.18536164578673381}},
   {{3.8458382180539274, -0.16412661195779601}},
   {{4.128125145879042, -0.14628583622868499}},
   {{4.4076163610719323, -0.1311706629055007}},
   {{0.0, -3.0}},
   {{2.6789053349863964e-07, -2.9874466496002539}},
   {{3.3014196104324863e-05, -2.9490921096071312}},
   {{0.00052888173072737556, -2.8825490793540243}},
   {{0.0036101083032490976, -2.7833935018050542}},
   {{0.015196755431928262, -2.6460736446925637}},
   {{0.046427206725257929, -2.4669468857470385}},
   {{0.11224672545625537, -2.2485005928934565}},
   {{0.22654867256637168, -2.0017699115044247}},
   {{0.39646402855156321, -1.7443190804295865}},
   {{0.61979373264577553, -1.4946449821499406}},
   {{0.8869711378018893, -1.2668234468196127}},
   {{1.1853658536585365, -1.0682926829268293}},
   {{1.503009611344865, -0.90066929222502901}},
   {{1.8304779220548293, -0.76186581196961145}},
   {{2.161220272993249, -0.64808005373345023}},
   {{2.491105367188688, -0.55511631442907106}},
   {{2.817759654775601, -0.47907359311045444}},
   {{3.139976366322009, -0.4166144756277696}},
   {{3.4572748731582088, -0.36500842852942922}},
   {{3.7696019300361883, -0.32207478890229191}},
   {{0.0, -4.0}},
   {{3.4292596900052667e-10, -3.99105538787855}},
   {{1.7091673927779473e-07, -3.9640240773828954}},
   {{6.2803298724456102e-06, -3.9182715604069123}},
   {{7.8455986191746437e-05, -3.8525812019457084}},
   {{0.00053757409302012836, -3.7649000125260783}},
   {{0.002497664506668433, -3.6520948632851313}},
   {{0.0088015269632856878, -3.5100405270183899}},
   {{0.0251214366321574, -3.3344781904715175}},
   {{0.060537968624390849, -3.1228727369542217}},
   {{0.12669425695946757, -2.8768199376623715}},
   {{0.23514284018438844, -2.6037247760912927}},
   {{0.39377025567158802, -2.3163485776017283}},
   {{0.60419326632260684, -2.0299850616477868}},
   {{0.86157462719357891, -1.7586712670710503}},
   {{1.1566720140320819, -1.5123756776128434}},
   {{1.478692020013425, -1.2961343855235474}},
   {{1.8175851921669044, -1.1107905446564041}},
   {{2.1652476381912984, -0.95441527371871204}},
   {{2.5157918867739499, -0.82366800642532489}},
   {{2.8652901048925403, -0.71477297733440914}}};

  RANGES_FOR( const auto pair, ranges::view::zip( trial, reference ) ){
    const auto trial = std::get<0>(pair);
    const auto reference = std::get<1>(pair);
    REQUIRE( trial[0] == Approx( reference[0] ) );
    REQUIRE( trial[1] == Approx( reference[1] ) );
  }  
 
}
